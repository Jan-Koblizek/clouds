/*
Copyright (c) 2020 Jan Koblížek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

CGPROGRAM
#pragma kernel CSMain


RWTexture3D<float4> Result;
float Time;


float3 hash33(float3 p3) {
	p3 = frac(73 * p3 * float3(.1731, 1.1030, 13.0973));
	p3 += dot(p3, p3.yxz + 19.19);
	return frac((p3.xxy + p3.yxx)*p3.zyx);
}


//3D Voronoi noise
float worley(float3 x, int tiles) {
	float3 fragPos = x;
	int3 p = floor(fragPos);
	float minDist = 10.;
	for (int i = -1; i < 2; i++) {
		for (int j = -1; j < 2; j++) {
			for (int k = -1; k < 2; k++) {
				int n = ((tiles + i + p.x) % tiles) + ((tiles + j + p.y) % tiles) * tiles + ((tiles + k + p.z) % tiles) * tiles * tiles;
				float n2 = float(n) / tiles;

				float3 pos1 = hash33(float3(n2, n2, n2));
				float3 pos2 = (0.5 * sin(pos1 * Time * 100) + 0.5) + float3(i + p.x, j + p.y, k + p.z);

				float d = length(pos2 - fragPos);
				if (d < minDist) {
					minDist = d;
				}
			}
		}
	}

	return 1. - minDist;
}

//Tilable voronoi - allows seamless tiling of the texture
float tilableWorley(float3 x, const int octaves, float tile) {
	float f = 1.;
	float a = 1.;
	float c = 0.;
	float w = 0.;

	if (tile > 0.) f = tile;

	for (int i = 0; i < octaves; i++) {
		c += a * worley(x * f, f);
		f *= 2.0;
		w += a;
		a *= 0.5;
	}

	return c / w;
}

/*
Creates different frequencies of Voronoi noise used to generate basic cloud shapes
*/
[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 coord = float3(id) / 127;
	float4 col = float4(1,1,1,1);

	float mfbm = 0.9;
	float mvor = 0.7;

	//Returns 3D Voronoi noises of different frequencies - each frequency in one color channel
	col[0] = tilableWorley(coord, 8., 3.);
	col[1] = tilableWorley(coord + 0., 3, 7.);
	col[2] = tilableWorley(coord + 0., 3, 13.);
	col[3] = tilableWorley(coord + 0., 3, 29.);
	Result[id.xyz] = col;
}
ENDCG